{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\BAngadi\\\\Desktop\\\\react-redux\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\BAngadi\\\\Desktop\\\\react-redux\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\BAngadi\\\\Desktop\\\\react-redux\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\BAngadi\\\\Desktop\\\\react-redux\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\BAngadi\\\\Desktop\\\\react-redux\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\BAngadi\\\\Desktop\\\\react-redux\\\\test\\\\src\\\\components\\\\post.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // connect to reduc createStore\n\nimport { fetchPosts } from '../actions/postAction'; // call the action\n\nimport PropTypes from 'prop-types';\n\nvar Post =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Post, _Component);\n\n  function Post() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Post)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.componentWillMount = function () {\n      _this.props.fetchPosts();\n    };\n\n    return _this;\n  }\n\n  _createClass(Post, [{\n    key: \"render\",\n    value: function render() {\n      var postItems = this.props.posts.map(function (post) {\n        return React.createElement(\"div\", {\n          key: post.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, post.title), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, post.body));\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"POSTS\"), postItems);\n    }\n  }]);\n\n  return Post;\n}(Component);\n\nPost.propTypes = {\n  fetchPosts: PropTypes.func.isRequired,\n  posts: PropTypes.array.isRequired,\n  newPost: PropTypes.object\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    posts: state.posts.items,\n    //posts because in rootReducer we have used posts here so maintain sam variable\n    newPost: state.posts.item\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchPosts: fetchPosts\n})(Post); //export default connect (mapStateToProps, function for action)\n//mapStateToProps -- get state from redux and map to props of component and we can use inside our compinent","map":{"version":3,"sources":["C:\\Users\\BAngadi\\Desktop\\react-redux\\test\\src\\components\\post.js"],"names":["React","Component","connect","fetchPosts","PropTypes","Post","componentWillMount","props","postItems","posts","map","post","id","title","body","propTypes","func","isRequired","array","newPost","object","mapStateToProps","state","items","item"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AAEA,SAAQC,OAAR,QAAsB,aAAtB,C,CAAqC;;AACrC,SAAQC,UAAR,QAAyB,uBAAzB,C,CAAkD;;AAClD,OAAOC,SAAP,MAAsB,YAAtB;;IACMC,I;;;;;;;;;;;;;;;;;;UAEJC,kB,GAAoB,YAAK;AACvB,YAAKC,KAAL,CAAWJ,UAAX;AACD,K;;;;;;;6BACO;AACN,UAAMK,SAAS,GAAG,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,GAAjB,CAAqB,UAAAC,IAAI;AAAA,eACzC;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKD,IAAI,CAACE,KAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIF,IAAI,CAACG,IAAT,CAFF,CADyC;AAAA,OAAzB,CAAlB;AAMA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEGN,SAFH,CADF;AAMD;;;;EAlBgBP,S;;AAqBnBI,IAAI,CAACU,SAAL,GAAiB;AACfZ,EAAAA,UAAU,EAAEC,SAAS,CAACY,IAAV,CAAeC,UADZ;AAEfR,EAAAA,KAAK,EAAEL,SAAS,CAACc,KAAV,CAAgBD,UAFR;AAGfE,EAAAA,OAAO,EAAEf,SAAS,CAACgB;AAHJ,CAAjB;;AAKA,IAAMC,eAAe,GAAI,SAAnBA,eAAmB,CAAAC,KAAK;AAAA,SAAK;AACjCb,IAAAA,KAAK,EAACa,KAAK,CAACb,KAAN,CAAYc,KADe;AACR;AACzBJ,IAAAA,OAAO,EAAEG,KAAK,CAACb,KAAN,CAAYe;AAFY,GAAL;AAAA,CAA9B;;AAKA,eAAetB,OAAO,CAACmB,eAAD,EAAiB;AAAElB,EAAAA,UAAU,EAAVA;AAAF,CAAjB,CAAP,CAAwCE,IAAxC,CAAf,C,CACA;AAEA","sourcesContent":["import React,{Component} from 'react';\r\n\r\nimport {connect} from 'react-redux'; // connect to reduc createStore\r\nimport {fetchPosts} from '../actions/postAction'; // call the action\r\nimport PropTypes from 'prop-types';\r\nclass Post extends Component{\r\n\r\n  componentWillMount =() =>{\r\n    this.props.fetchPosts();\r\n  }\r\n  render(){\r\n    const postItems = this.props.posts.map(post =>(\r\n      <div key={post.id}>\r\n        <h3>{post.title}</h3>\r\n        <p>{post.body}</p>\r\n      </div>\r\n    ))\r\n    return (\r\n      <div>\r\n        <h1>POSTS</h1>\r\n        {postItems}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nPost.propTypes = {\r\n  fetchPosts: PropTypes.func.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  newPost: PropTypes.object\r\n}\r\nconst mapStateToProps =  state => ({\r\n  posts:state.posts.items, //posts because in rootReducer we have used posts here so maintain sam variable\r\n  newPost: state.posts.item\r\n})\r\n\r\nexport default connect(mapStateToProps,{ fetchPosts })(Post);\r\n//export default connect (mapStateToProps, function for action)\r\n\r\n//mapStateToProps -- get state from redux and map to props of component and we can use inside our compinent\r\n"]},"metadata":{},"sourceType":"module"}